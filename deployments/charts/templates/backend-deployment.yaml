apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-backend
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backend
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: wait-for-postgresql
          image: busybox
          command: ['sh', '-c', 'until nc -z {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }}; do echo waiting for postgresql; sleep 2; done;']
      volumes:
        - name: kube-config
          hostPath:
            path: {{ .Values.backend.kubeconfig.hostPath }}
            type: File
      containers:
        - name: backend
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.backend.service.port }}
              name: http
          volumeMounts:
            - name: kube-config
              mountPath: /root/.kube/config
              subPath: config
              readOnly: true
          env:
            - name: DOMAIN
              value: {{ .Values.global.domain | quote }}
            - name: FRONTEND_HOST
              value: {{ .Values.backend.env.FRONTEND_HOST | quote }}
            - name: ENVIRONMENT
              value: {{ .Values.global.environment | quote }}
            - name: BACKEND_CORS_ORIGINS
              value: {{ .Values.backend.env.BACKEND_CORS_ORIGINS | quote }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-backend-secrets
                  key: SECRET_KEY
            - name: FIRST_SUPERUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-backend-secrets
                  key: FIRST_SUPERUSER
            - name: FIRST_SUPERUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-backend-secrets
                  key: FIRST_SUPERUSER_PASSWORD
            - name: POSTGRES_SERVER
              value: {{ .Release.Name }}-postgresql
            - name: POSTGRES_PORT
              value: {{ .Values.postgresql.service.port | quote }}
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.auth.database | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: postgres-password
            - name: SMTP_HOST
              value: {{ .Values.backend.env.SMTP_HOST | quote }}
            - name: SMTP_PORT
              value: {{ .Values.backend.env.SMTP_PORT | quote }}
            - name: SMTP_TLS
              value: {{ .Values.backend.env.SMTP_TLS | quote }}
            - name: EMAILS_FROM_EMAIL
              value: {{ .Values.backend.env.EMAILS_FROM_EMAIL | quote }}
            - name: KUBECONFIG
              value: "/root/.kube/config"
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /api/v1/utils/health-check
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /api/v1/utils/health-check
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5 